{"version":3,"sources":["Algorithms/MergeSort.js","Algorithms/QuickSort.js","Algorithms/BubbleSort.js","Algorithms/HeapSort.js","SortingVisualizer/SortingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["MergeSort","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","QuickSort","auxArray","quicksort","start","end","pIndex","pivot","swap","partition","index1","index2","tmp","BubbleSort","sorted","bubblesort","indexOne","indexTwo","HeapSort","n","heapify","heapsort","arrayLength","largest","left","right","PRIMARY_COLOR","SECONDARY_COLOR","SortingVisualizer","props","state","this","resetArray","min","max","random","setState","bars","document","getElementsByClassName","className","arrayBars","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","finalColor","barTwoIndex","pivotIndex","pIndexBar","pivotBar","iOne","iTwo","iOneBar","iTwoBar","comparison","largestBar","comparisonBar","map","value","idx","onClick","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f7a61599.chunk.js","sourcesContent":["export function MergeSort(array){\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  const auxiliaryArray = array.slice();\r\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  return animations;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n  }\r\n  \r\n  function doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, j]);\r\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index i in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n      } else {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index j in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n      }\r\n    }\r\n    while (i <= middleIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, i]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, i]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([j, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([j, j]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }","/*export function QuickSort(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) {\r\n      return array;\r\n    }\r\n    \r\n\r\n    const pivot = array[array.length-1];\r\n    const leftArr = [];\r\n    const rightArr = [];\r\n    for (const el of array.slice(0, array.length-1)){\r\n      el <= pivot ? leftArr.push(el) : rightArr.push(el);\r\n      animations.push([\"comparison1\",el,pivot]); //To colour the compared values\r\n      animations.push([\"comparison2\",el,pivot]); //To take the colours off\r\n   \r\n  }\r\n\r\n\r\n    let sortArray= [...QuickSort(leftArr), pivot, ...QuickSort(rightArr)];\r\n\r\n    return [animations, sortArray];\r\n\r\n  }*/\r\n\r\n  export const QuickSort = (array) => {\r\n    let animations = [];\r\n    let auxArray = array.slice();\r\n    quicksort(auxArray, 0, auxArray.length - 1, animations);\r\n    return animations;\r\n  };\r\n  \r\n  function quicksort(array, start, end, animations) {\r\n    if (start < end) {\r\n      let pIndex = partition(array, start, end, animations);\r\n      quicksort(array, start, pIndex - 1, animations);\r\n      quicksort(array, pIndex + 1, end, animations);\r\n    }\r\n  }\r\n  \r\n  function swap(array, index1, index2) {\r\n    let tmp = array[index2];\r\n    array[index2] = array[index1];\r\n    array[index1] = tmp;\r\n  }\r\n  \r\n  function partition(array, start, end, animations) {\r\n    let pivot = array[end];\r\n    let pIndex = start;\r\n    for (let i = start; i < end; i++) {\r\n      animations.push([\"comparing\", pIndex, i, end]);\r\n      if (array[i] <= pivot) {\r\n        animations.push([\"swapping\", pIndex, i, end]);\r\n        swap(array, i, pIndex);\r\n        pIndex++;\r\n      }\r\n    }\r\n    swap(array, pIndex, end);\r\n    animations.push([\"swapping\", pIndex, end, end]);\r\n    return pIndex;\r\n  }","export const BubbleSort = (array) => {\r\n    let animations = [];\r\n    let auxArray = array.slice();\r\n    bubblesort(auxArray, animations);\r\n    return animations;\r\n  };\r\n  \r\n  function bubblesort(array, animations) {\r\n    let sorted = false;\r\n    let length = array.length - 1;\r\n    while (!sorted) {\r\n      sorted = true;\r\n      for (let i = 0; i < length; i++) {\r\n        animations.push([\"comparing\", i, i + 1]);\r\n        if (array[i] > array[i + 1]) {\r\n          sorted = false;\r\n          animations.push([\"swapping\", i, i + 1]);\r\n          swap(array, i, i + 1);\r\n        }\r\n      }\r\n      length--;\r\n    }\r\n    return array;\r\n  }\r\n  \r\n  function swap(array, indexOne, indexTwo) {\r\n    let tmp = array[indexOne];\r\n    array[indexOne] = array[indexTwo];\r\n    array[indexTwo] = tmp;\r\n  }","export const HeapSort = (array) => {\r\n    let animations = [];\r\n    let auxArray = array.slice();\r\n    heapsort(auxArray, animations);\r\n    return animations;\r\n  };\r\n  \r\n  function heapsort(array, animations) {\r\n    let n = array.length;\r\n  \r\n    //Build Max Heap\r\n    for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {\r\n      heapify(array, n, i, animations);\r\n    }\r\n  \r\n    for (let i = n - 1; i > 0; i--) {\r\n      let tmp = array[0];\r\n      array[0] = array[i];\r\n      array[i] = tmp;\r\n      animations.push([\"swapping\", 0, i]);\r\n      heapify(array, i, 0, animations);\r\n    }\r\n  }\r\n  \r\n  function heapify(array, arrayLength, i, animations) {\r\n    let largest = i;\r\n    let left = i * 2 + 1;\r\n    let right = i * 2 + 2;\r\n  \r\n    if (right < arrayLength && array[right] > array[largest]) {\r\n      animations.push([\"comparing\", largest, right]);\r\n      largest = right;\r\n    }\r\n  \r\n    if (left < arrayLength && array[left] > array[largest]) {\r\n      animations.push([\"comparing\", largest, left]);\r\n      largest = left;\r\n    }\r\n  \r\n    if (largest !== i) {\r\n      animations.push([\"swapping\", largest, i]);\r\n      let tmp = array[i];\r\n      array[i] = array[largest];\r\n      array[largest] = tmp;\r\n      heapify(array, arrayLength, largest, animations);\r\n    }\r\n  }","import React from 'react';\r\nimport './SortingVisualizer.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {MergeSort} from '../Algorithms/MergeSort';\r\nimport {QuickSort} from '../Algorithms/QuickSort';\r\nimport {BubbleSort} from '../Algorithms/BubbleSort';\r\nimport {HeapSort} from '../Algorithms/HeapSort';\r\n\r\nconst ANIMATION_SPEED_MS = 5;\r\nconst PRIMARY_COLOR = 'black';\r\nconst SECONDARY_COLOR = 'red';\r\n\r\nexport default class SortingVisualizer extends React.Component \r\n    {\r\n        constructor(props)\r\n            {\r\n                super(props);\r\n                this.state = \r\n                    {\r\n                        array: [],\r\n                    };\r\n            }\r\n            componentDidMount(){\r\n                this.resetArray()\r\n            }        \r\n\r\n    resetArray() \r\n    {\r\n        const array = [];\r\n        for (let i = 0; i < 179; i++) \r\n            {\r\n                array.push(randomIntFromInterval(5, 617));\r\n            }\r\n        this.setState({array});\r\n    }\r\n\r\n    finalColor() {\r\n        let bars = document.getElementsByClassName('array-bar');\r\n        for (let i = 0; i < bars.length; i++) {\r\n          bars[i].className = \"array-bar bar-animation\";\r\n        }\r\n      }\r\n\r\n    MergeSort() {\r\n        const animations = MergeSort(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n    setTimeout(() => {\r\n        this.finalColor();\r\n      }, 3 * animations.length);\r\n\r\n    }\r\n\r\n    QuickSort() {\r\n        const animations = QuickSort(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const [state, pIndex, barTwoIndex, pivotIndex] = animations[i];\r\n            const pIndexBar = arrayBars[pIndex].style;\r\n            const barTwoStyle = arrayBars[barTwoIndex].style;\r\n            const pivotBar = arrayBars[pivotIndex].style;\r\n            //Changes bars colors accordingly\r\n            if (state === \"comparing\") {\r\n              setTimeout(() => {\r\n                pIndexBar.backgroundColor = 'red';\r\n                barTwoStyle.backgroundColor = 'yellow';\r\n                pivotBar.backgroundColor = 'orange';\r\n              }, i * 3);\r\n      \r\n              // Turns bars back to blue\r\n              setTimeout(() => {\r\n                pIndexBar.backgroundColor = PRIMARY_COLOR;\r\n                barTwoStyle.backgroundColor = PRIMARY_COLOR;\r\n                pivotBar.backgroundColor = PRIMARY_COLOR;\r\n              }, (i + 1) * 3);\r\n            } else {\r\n              //Swaps bar's heights\r\n              setTimeout(() => {\r\n                let tmp = pIndexBar.height;\r\n                pIndexBar.height = barTwoStyle.height;\r\n                barTwoStyle.height = tmp;\r\n              }, i * 3);\r\n            }\r\n          }\r\n          setTimeout(() => {\r\n            this.finalColor();\r\n          }, 3 * animations.length);\r\n    }\r\n\r\n    BubbleSort() {\r\n        const animations = BubbleSort(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const [state, iOne, iTwo] = animations[i];\r\n            let iOneBar = arrayBars[iOne].style;\r\n            let iTwoBar = arrayBars[iTwo].style;\r\n            if (state === \"comparing\") {\r\n              //Colors and resotores bars being compared\r\n              setTimeout(() => {\r\n                iOneBar.backgroundColor = SECONDARY_COLOR;\r\n              }, i * 0.5);\r\n              setTimeout(() => {\r\n                iOneBar.backgroundColor = PRIMARY_COLOR;\r\n              }, (i + 1) * 0.5);\r\n            } else {\r\n              //Swaps bar's heights\r\n              setTimeout(() => {\r\n                let tmp = iOneBar.height;\r\n                iOneBar.height = iTwoBar.height;\r\n                iTwoBar.height = tmp;\r\n              }, i * 0.5);\r\n            }\r\n          }\r\n          setTimeout(() => {\r\n            this.finalColor();\r\n          }, 8000);\r\n    }\r\n\r\n    HeapSort() {\r\n        const animations = HeapSort(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const [state, largest, comparison] = animations[i];\r\n            const largestBar = arrayBars[largest].style;\r\n            const comparisonBar = arrayBars[comparison].style;\r\n            if (state === \"comparing\") {\r\n              //Colors and restores bars being compared\r\n              setTimeout(() => {\r\n                largestBar.backgroundColor = SECONDARY_COLOR;\r\n                comparisonBar.backgroundColor = SECONDARY_COLOR;\r\n              }, i * 5);\r\n              setTimeout(() => {\r\n                largestBar.backgroundColor = PRIMARY_COLOR;\r\n                comparisonBar.backgroundColor = PRIMARY_COLOR;\r\n              }, (i + 1) * 5);\r\n            } else {\r\n              //Swaps bar's heights\r\n              setTimeout(() => {\r\n                let tmp = largestBar.height;\r\n                largestBar.height = comparisonBar.height;\r\n                comparisonBar.height = tmp;\r\n              }, i * 5);\r\n            }\r\n          }\r\n    }\r\n\r\n    render() \r\n        {\r\n            const {array} = this.state;\r\n\r\n            return (\r\n                <div className=\"array-container\">\r\n                    <div className=\"body\"><p><b><u>Sorting Visualizer</u></b></p></div>\r\n                    {array.map((value, idx) => (\r\n                        <div className=\"array-bar\" key={idx}\r\n                        style={{\r\n                            height: `${value}px`           \r\n                            }}>\r\n                        </div>\r\n                    ))}\r\n                    \r\n                    <button onClick={() => this.resetArray()}>New Array</button>\r\n                    <button onClick={() => this.MergeSort()}>Merge Sort</button>\r\n                    <button onClick={() => this.QuickSort()}>Quick Sort</button>\r\n                    <button onClick={() => this.BubbleSort()}>Bubble Sort</button>\r\n                    <button onClick={() => this.HeapSort()}>Heap Sort</button>\r\n                    \r\n                    </div>\r\n                );\r\n            }       \r\n        }\r\n    \r\n\r\n    function randomIntFromInterval(min, max)\r\n    {\r\n        return Math.floor(Math.random()*(max - min + 1) + min);\r\n    }\r\n","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer>    \n      </SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}